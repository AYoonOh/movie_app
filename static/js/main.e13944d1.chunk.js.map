{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","Movie","genres","synopsis","map","index","key","App","state","_getMovies","a","_callApi","movies","setState","fetch","then","potato","json","data","catch","err","console","log","_renderMovies","movie","title_english","medium_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yUAgEA,SAASA,EAAT,GAAoC,IAAdC,EAAa,EAAbA,OAAQC,EAAK,EAALA,IAC1B,OACI,yBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAY,iBAI5D,SAASC,EAAT,GAA6B,IAARC,EAAO,EAAPA,MACjB,OACA,0BAAMF,UAAU,eAAeE,EAA/B,KAmBWC,MA/Cf,YAAkD,IAAlCJ,EAAiC,EAAjCA,MAAOH,EAA0B,EAA1BA,OAAQQ,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,SACnC,OACI,yBAAKL,UAAU,SACX,yBAAKA,UAAU,iBACX,kBAACL,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,KAEtC,yBAAKC,UAAU,iBACX,4BAAKD,GACL,yBAAKC,UAAU,gBACVI,EAAOE,KAAI,SAACJ,EAAOK,GAAR,OAAkB,kBAACN,EAAD,CAAYC,MAAOA,EAAOM,IAAKD,SAGrE,uBAAGP,UAAU,kBACRK,KCQFI,E,2MArDbC,MAAQ,G,EAQRC,W,sBAAa,4BAAAC,EAAA,sEAEU,EAAKC,WAFf,OAELC,EAFK,OAGX,EAAKC,SAAS,CACZD,WAJS,2C,EAQbD,SAAW,WACT,OAAOG,MAAM,yDACZC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UAEtBF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKN,UACvBO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAG5BG,cAAgB,WAWd,OAVgB,EAAKf,MAAMI,OAAOR,KAAI,SAAAoB,GAEpC,OADAH,QAAQC,IAAIE,GACL,kBAAC,EAAD,CACL3B,MAAO2B,EAAMC,cACb/B,OAAQ8B,EAAME,mBACdpB,IAAKkB,EAAMG,GACXzB,OAAQsB,EAAMtB,OACdC,SAAUqB,EAAMrB,e,mFA3BpByB,KAAKnB,e,+BAwCL,OACA,yBAAKX,UAAU,OACZ8B,KAAKpB,MAAMI,OAASgB,KAAKL,gBAAkB,e,GAtDhCM,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.e13944d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css';\r\nimport PropTypes from 'prop-types';\r\n\r\n// 변수값을 jsx에서 실행시키기 위해서는 {}을 꼭 쳐야 함!\r\n/*\r\nclass Movie extends Component {\r\n\r\n    static propTypes = {\r\n       title: PropTypes.string.isRequired,\r\n       poster: PropTypes.string.isRequired\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props);\r\n        return(\r\n            <div>\r\n                <MoviePoster poster={this.props.poster}/>\r\n                <h1>{this.props.title}</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n*/\r\n\r\n/*\r\nclass MoviePoster extends Component {\r\n\r\n    static propTypes = {\r\n        poster: PropTypes.string.isRequired\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props)\r\n        return(\r\n            <img src={this.props.poster} alt=\"Movie Poster\" />\r\n        );\r\n    }\r\n}\r\n*/\r\n\r\n// dull component라면 state와 render함수, componentWillMount 등의 컴포넌트 필요 없다..!\r\n// class Movie라면 this.props.colNm으로 접근해야 함!\r\n// funciton이라면 그냥 colNm만 써도 무방\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return(\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie_Columns\">\r\n                <MoviePoster poster={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie_Columns\">\r\n                <h2>{title}</h2>\r\n                <div className=\"Movie_Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                </div>\r\n            </div>\r\n            <p className=\"Movie_Synopsis\">\r\n                {synopsis}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n// dull component\r\nfunction MoviePoster({poster, alt}){\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className = \"Movie_Poster\" />\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return (\r\n    <span className=\"Movie_Genre\">{genre} </span> \r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.string.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n//모든 컴포넌트는 render ftn을 가지고 있다.\nclass App extends Component {\n\n  // render : componentWillMount() >> render() >> componentDidMount()\n                                                               // 업데이트 전에 로딩 표시      // 로딩 표시 삭제                                                  \n  // update : WillReceiveProps() >> shouldComponentUpdate() >> componentWillUpdate() >> render() >> componentDidUpdate()\n\n  // component life cycle\n  state = {\n  }\n\n  componentDidMount() {\n    // fetch >> promise >> 2개 상황을 deal with >> xml 처리를 모두 해줌\n    this._getMovies();\n  }\n\n  _getMovies = async () => {\n   // await는 _callApi()가 끝나기를 기다림..!\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=rating')\n    .then(potato => potato.json())\n    //.then(json => console.log(json))\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  _renderMovies = () => {\n    const movies =  this.state.movies.map(movie => {\n      console.log(movie)\n      return <Movie \n        title={movie.title_english} \n        poster={movie.medium_cover_image} \n        key={movie.id} \n        genres={movie.genres}\n        synopsis={movie.synopsis}  \n      />\n    })\n    return movies\n  }\n\n  /*\n    {this.state.movies.map((movie, index) => {\n      return <Movie title={movie.title} poster={movie.poster} key={index} />\n    })}\n  */\n  // state가 업데이트 될 때마다 render가 실행됨!\n  render() {\n    return (\n    <div className=\"App\">\n      {this.state.movies ? this._renderMovies() : 'Loading'}\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// render component App in the component of which id is root in the index.html \n// DOM : Document Object Model\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}